#!/bin/sh

renice -1 $$ >/dev/null 2>&1

#### Paths. ####

aprdir='/tmp/ApRoam'
log='/var/zram/ApRoamControl.log'

#### SIGNAL PROCESSING FUNCTION ####

sig_proc() {
	# On the ap the station is currently connected to calculate the signal difference between now and the previously detected signal.
	if [ -f $aprdir/${2}signal.$1 ]; then
		PREVSIGNAL=`cat $aprdir/${2}signal.$1 | cut -d '-' -f2`
		SIGNAL=`echo $3 | cut -d '-' -f2`
		if [ "$SIGNAL" -gt "$PREVSIGNAL" ]; then
			SIGDIFF=$(($SIGNAL-$PREVSIGNAL))
		else
			SIGDIFF=0
		fi
	else
		SIGDIFF=0
	fi
	# On the ap the station is currently recieving a stronger signal calculate the signal difference between now and the previously detected signal.
        if [ -f $aprdir/${4}signal.$1 ]; then
		PREVSIGNAL2=`cat $aprdir/${4}signal.$1 | cut -d '-' -f2`
                SIGNAL2=`echo $5 | cut -d '-' -f2`
                if [ "$PREVSIGNAL2" -gt "$SIGNAL2" -a "$PREVSIGNAL" -ne "99" ]; then
                        SIG2DIFF=$(($PREVSIGNAL2-$SIGNAL2))
                else
                        SIG2DIFF=0
                fi
        else
                SIG2DIFF=0
        fi
	# Check the signal difference if it was large it might have been a bad signal so don't deauthenticate. Otherwise deauthenticate.
	if [ "$SIGDIFF" -lt "23" -a "$SIG2DIFF" -lt "23" ]; then
		DEAUTHSTATION=1
	else
		# The signal difference was large so ignore it and don't deauthenticate.
		DEAUTHSTATION=0
	fi
}

#### INTIALIZE VARIABLES AND CLEAN UP. ####

AP1ADDRESS='192.168.1.6'
AP2ADDRESS='192.168.1.4'
AP3ADDRESS='192.168.1.2'
DEAUTHPORT='555'
DEAUTHSTATION='1'
PINGLOOP='0'
# PINGTOTAL sets how often you ping stations. Pinging improves signal detection but at the cost of increased battery consumption by the stations.
# To set PINGTOTAL: -1=Ping disabled 0=Ping every 10 seconds 1=Ping every 20 seconds 2=Ping every 30 seconds etc.
PINGTOTAL='0'
rm -f $aprdir/ap*signal.*
mkdir -p $aprdir

#### MAIN LOOP ####

while true
do
	STARTTIME=`date +%s`
	DATE=`date`
	echo "-------------------- $DATE --------------------" >> $log

	#### RETREIVE STATION DATA. ####

	# Retreive Access Point 1 Station Dump.
	touch $aprdir/ap1/station.lock >/dev/null 2>&1
	sleep .15
	AP1STATIONS=`grep "Station" $aprdir/ap1/station.dump 2>/dev/null | awk '{print $2}'`
	AP1STATIONCOUNT=`grep -c "Station" $aprdir/ap1/station.dump 2>/dev/null`
        rm -f $aprdir/ap1/station.lock >/dev/null 2>&1

	# Retreive Access Point 2 Station Dump.
        touch $aprdir/ap2/station.lock >/dev/null 2>&1
        sleep .15
        AP2STATIONS=`grep "Station" $aprdir/ap2/station.dump 2>/dev/null | awk '{print $2}'`
        AP2STATIONCOUNT=`grep -c "Station" $aprdir/ap2/station.dump 2>/dev/null`
        rm -f $aprdir/ap2/station.lock >/dev/null 2>&1

	# Retreive Access Point 3 Station Dump.
        touch $aprdir/ap3/station.lock >/dev/null 2>&1
        sleep .15
        AP3STATIONS=`grep "Station" $aprdir/ap3/station.dump 2>/dev/null | awk '{print $2}'`
        AP3STATIONCOUNT=`grep -c "Station" $aprdir/ap3/station.dump 2>/dev/null`
        rm -f $aprdir/ap3/station.lock >/dev/null 2>&1

	# Combine All Access Point Clients.
	STATIONS="$AP1STATIONS $AP2STATIONS $AP3STATIONS"

	STATIONCOUNT=$(($AP1STATIONCOUNT+$AP2STATIONCOUNT+$AP3STATIONCOUNT))

	#### PING STATIONS TO IMPROVE CHANCE OF RETREIVING A SIGNAL. ####
	if [ "$PINGLOOP" -ge "$PINGTOTAL" -a "$PINGTOTAL" -ne "-1" ]; then
		PINGLOOP=0
		COUNT=$STATIONCOUNT
		while [ "$COUNT" -gt "0" ]
		do
			STATION=`echo $STATIONS | awk -v x=$COUNT '{print $x}'`
			# First Try Retreiving Ip Address From Dnsmasq Lease File.
			ip=`cat /var/lib/misc/dnsmasq.leases | grep -m1 "$STATION" | awk '{print $3}'`
			if [ "$ip" = "" ]; then
				# Second Try Retreiving Ip Address From Arp Cache.
				ip=`cat /proc/net/arp | grep -m1 "$STATION" | awk '{print $1}'`
				if [ "$ip" = "" ]; then
					# Third Try Pinging Every Ip Address On Subnet.
					fping -b1 -c1 -i1 -q -r0 -t1 -g 192.168.1.0/24 >/dev/null 2>&1
					COUNT=0
				else
					ping -i .05 -c 1 -s 0 $ip >/dev/null 2>&1 &
				fi
			else
				ping -i .05 -c 1 -s 0 $ip >/dev/null 2>&1 &
			fi
			COUNT=$(($COUNT-1))
		done
	else
		PINGLOOP=$(($PINGLOOP+1))
	fi

	#### RETREIVE NETWORK DATA AND DO PREPROCESSING. ####

        # Retreive Access Point 1 Network Data Dump.
	touch $aprdir/ap1/network.lock >/dev/null 2>&1
	sleep .15
	# Preprocess Network Data By Greping Out Unwanted Packets.
	tcpdump -e -t -r $aprdir/ap1/ap1_network.dump 2>/dev/null | grep -E -v 'Acknowledgment|Beacon|Data' | grep -v "(oui Unknown) BA" > $aprdir/ap1_network.dump
	rm -f $aprdir/ap1/network.lock >/dev/null 2>&1

        # Retreive Access Point 2 Network Data Dump.
	touch $aprdir/ap2/network.lock >/dev/null 2>&1
	sleep .15
	# Preprocess Network Data By Greping Out Unwanted Packets.
	tcpdump -e -t -r $aprdir/ap2/ap2_network.dump 2>/dev/null | grep -E -v 'Acknowledgment|Beacon|Data' | grep -v "(oui Unknown) BA" > $aprdir/ap2_network.dump
	rm -f $aprdir/ap2/network.lock >/dev/null 2>&1

	# Retreive Access Point 3 Network Data Dump.
	touch $aprdir/ap3/network.lock >/dev/null 2>&1
	sleep .15
	# Preprocess Network Data By Greping Out Unwanted Packets.
	tcpdump -e -t -r $aprdir/ap3/ap3_network.dump 2>/dev/null | grep -E -v 'Acknowledgment|Beacon|Data' | grep -v "(oui Unknown) BA" > $aprdir/ap3_network.dump
	rm -f $aprdir/ap3/network.lock >/dev/null 2>&1

	#### RETREIVE STATION SIGNAL VALUES. ####

	while [ "${STATIONCOUNT}" -gt "0" ]
	do
		STATION=`echo $STATIONS | awk -v x=$STATIONCOUNT '{print $x}'`

		CONNECTEDTOAP1=`echo $AP1STATIONS | grep -c $STATION`
		CONNECTEDTOAP2=`echo $AP2STATIONS | grep -c $STATION`
		CONNECTEDTOAP3=`echo $AP3STATIONS | grep -c $STATION`

		AP1SIGNAL=`grep $STATION $aprdir/ap1_network.dump 2>/dev/null | grep -E -o "\-?[0-9]{1,2}dB" | cut -d 'd' -f1  | tail -1`
		if [ "$AP1SIGNAL" = "" ]; then
			AP1SIGNAL='-99'
		fi
		AP2SIGNAL=`grep $STATION $aprdir/ap2_network.dump 2>/dev/null | grep -E -o "\-?[0-9]{1,2}dB" | cut -d 'd' -f1  | tail -1`
		if [ "$AP2SIGNAL" = "" ]; then
                        AP2SIGNAL='-99'
                fi
		AP3SIGNAL=`grep $STATION $aprdir/ap3_network.dump 2>/dev/null | grep -E -o "\-?[0-9]{1,2}dB" | cut -d 'd' -f1  | tail -1`
		if [ "$AP3SIGNAL" = "" ]; then
                        AP3SIGNAL='-99'
		fi

		#### LOG. ####

		echo " " >> $log
		echo "STATION=$STATION" >> $log
		echo "AP1SIGNAL=$AP1SIGNAL" >> $log
		echo "AP2SIGNAL=$AP2SIGNAL" >> $log
		echo "AP3SIGNAL=$AP3SIGNAL" >> $log

		#### PREVENT STATIONS FROM CONSTANTLY HOPPING AROUND DIFFERENT ACCESS POINTS DO TO SIMULAR SIGNAL LEVELS. ####

		ADJUST=0
		if [ "$CONNECTEDTOAP1" -gt "0" ]; then
			if [ "${AP1SIGNAL}" -lt "${AP2SIGNAL}" -o "${AP1SIGNAL}" -lt "${AP3SIGNAL}" ]; then
				if [ "${AP1SIGNAL}" -gt "-45" ]; then
					ADJUST=99
				elif [ "${AP1SIGNAL}" -gt "-50" ]; then
					ADJUST=18
				elif [ "${AP1SIGNAL}" -gt "-60" ]; then
					ADJUST=15
                        	elif [ "${AP1SIGNAL}" -gt "-65" ]; then
                                	ADJUST=10
				elif [ "${AP1SIGNAL}" -gt "-70" ]; then
					ADJUST=8
                        	else
					ADJUST=6
                        	fi
			fi
		fi
		if [ "$CONNECTEDTOAP2" -gt "0" ]; then
			if [ "${AP2SIGNAL}" -lt "${AP1SIGNAL}" -o "${AP2SIGNAL}" -lt "${AP3SIGNAL}" ]; then
				if [ "${AP2SIGNAL}" -gt "-45" ]; then
					ADJUST=99
				elif [ "${AP2SIGNAL}" -gt "-50" ]; then
					ADJUST=18
				elif [ "${AP2SIGNAL}" -gt "-60" ]; then
					ADJUST=15
				elif [ "${AP2SIGNAL}" -gt "-65" ]; then
					ADJUST=10
				elif [ "${AP2SIGNAL}" -gt "-70" ]; then
					ADJUST=8
				else
					ADJUST=6
				fi
			fi
		fi
		if [ "$CONNECTEDTOAP3" -gt "0" ]; then
			if [ "${AP3SIGNAL}" -lt "${AP1SIGNAL}" -o "${AP3SIGNAL}" -lt "${AP2SIGNAL}" ]; then
				if [ "${AP3SIGNAL}" -gt "-45" ]; then
					ADJUST=99
				elif [ "${AP3SIGNAL}" -gt "-50" ]; then
					ADJUST=18
				elif [ "${AP3SIGNAL}" -gt "-60" ]; then
					ADJUST=15
				elif [ "${AP3SIGNAL}" -gt "-65" ]; then
					ADJUST=10
				elif [ "${AP3SIGNAL}" -gt "-70" ]; then
					ADJUST=8
				else
					ADJUST=6
				fi
			fi
		fi

		#### LOG. ####

		echo "ADJUST=$ADJUST" >> $log
		echo "CONNECTED TO AP1=$CONNECTEDTOAP1" >> $log
		echo "CONNECTED TO AP2=$CONNECTEDTOAP2" >> $log
		echo "CONNECTED TO AP3=$CONNECTEDTOAP3" >> $log

		#### COMPARE SIGNAL LEVELS WITH OTHER ACCESS POINTS AND SEND DEAUTHENTICATION TO STATION IF ANOTHER ACCESS POINT HAS A BETTER SIGNAL. ####

		if [ "$CONNECTEDTOAP1" -gt "0" ]; then
			if [ "${AP2SIGNAL}" -gt "$(($AP1SIGNAL+$ADJUST))" -a "${AP2SIGNAL}" -ne "-99" -a "${AP1SIGNAL}" -ne "-99" ]; then
				sig_proc "$STATION" ap1 $AP1SIGNAL ap2 $AP2SIGNAL
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "$STATION deauthenticated from AP1!" >> $log
					echo "$STATION" | nc -q0 $AP1ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
			elif [ "${AP3SIGNAL}" -gt "$(($AP1SIGNAL+$ADJUST))" -a "${AP3SIGNAL}" -ne "-99" -a "${AP1SIGNAL}" -ne "-99" ]; then
				sig_proc "$STATION" ap1 $AP1SIGNAL ap3 $AP3SIGNAL
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "$STATION deauthenticated from AP1!" >> $log
					echo "$STATION" | nc -q0 $AP1ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
			fi
		fi
		if [ "$CONNECTEDTOAP2" -gt "0" ]; then
                        if [ "${AP1SIGNAL}" -gt "$(($AP2SIGNAL+$ADJUST))" -a "${AP1SIGNAL}" -ne "-99" -a "${AP2SIGNAL}" -ne "-99" ]; then
				sig_proc "$STATION" ap2 $AP2SIGNAL ap1 $AP1SIGNAL
				if [ "$DEAUTHSTATION" -eq "1" ]; then
                                	echo "$STATION deauthenticated from AP2!" >> $log
                                	echo "$STATION" | nc -q0 $AP2ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
                        elif [ "${AP3SIGNAL}" -gt "$(($AP2SIGNAL+$ADJUST))" -a "${AP3SIGNAL}" -ne "-99" -a "${AP2SIGNAL}" -ne "-99" ]; then
				sig_proc "$STATION" ap2 $AP2SIGNAL ap3 $AP3SIGNAL
				if [ "$DEAUTHSTATION" -eq "1" ]; then
                                	echo "$STATION deauthenticated from AP2!" >> $log
                                	echo "$STATION" | nc -q0 $AP2ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
			fi
                fi
		if [ "$CONNECTEDTOAP3" -gt "0" ]; then
                        if [ "${AP1SIGNAL}" -gt "$(($AP3SIGNAL+$ADJUST))" -a "${AP1SIGNAL}" -ne "-99" -a "${AP3SIGNAL}" -ne "-99" ]; then
				sig_proc "$STATION" ap3 $AP3SIGNAL ap1 $AP1SIGNAL
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "$STATION deauthenticated from AP3!" >> $log
					echo "$STATION" | nc -q0 $AP3ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
                        elif [ "${AP2SIGNAL}" -gt "$(($AP3SIGNAL+$ADJUST))" -a "${AP2SIGNAL}" -ne "-99" -a "${AP3SIGNAL}" -ne "-99" ]; then
				sig_proc "$STATION" ap3 $AP3SIGNAL ap2 $AP2SIGNAL
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "$STATION deauthenticated from AP3!" >> $log
					echo "$STATION" | nc -q0 $AP3ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
			fi
		fi
		# Save current station signal for all access points.
		echo $AP1SIGNAL > $aprdir/ap1signal.$STATION
		echo $AP2SIGNAL > $aprdir/ap2signal.$STATION
		echo $AP3SIGNAL > $aprdir/ap3signal.$STATION
		STATIONCOUNT=$(($STATIONCOUNT-1))
	done

	#### LOG. ####

	echo " " >> $log
	DATE=`date`
        echo "-------------------- $DATE --------------------" >> $log
	echo " " >> $log

	#### DYNAMICALLY ADJUST SLEEP TIME BASED ON HOW LONG IT TOOK TO EXECUTE.

	ENDTIME=`date +%s`
	EXETIME=$(($ENDTIME-$STARTTIME))
	SLEEPTIME=$((10-$EXETIME))
	if [ "$SLEEPTIME" -gt "0" ]; then
		sleep $SLEEPTIME
	fi
done
