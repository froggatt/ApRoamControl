#!/bin/sh

renice -1 $$ >/dev/null 2>&1

#### Paths. ####

aprdir='/tmp/ApRoam'
log='/var/zram/ApRoamControl.log'

#### SIGNAL PROCESSING FUNCTION ####

sig_proc() {
	# On the ap the station is currently connected to calculate the snr difference between now and the previously detected snr.
	if [ -f $aprdir/${2}snr.$1 ]; then
		PREVSNR=`cat $aprdir/${2}snr.$1`
		SNR=$3
		if [ "$SNR" -lt "$PREVSNR" ]; then
			SNRDIFF=$(($PREVSNR-$SNR))
		else
			SNRDIFF=0
		fi
	else
		SNRDIFF=0
	fi
	# On the ap the station is currently recieving a stronger snr calculate the snr difference between now and the previously detected snr.
        if [ -f $aprdir/${4}snr.$1 ]; then
		PREVSNR2=`cat $aprdir/${4}snr.$1`
                SNR2=$5
                if [ "$SNR2" -gt "$PREVSNR2" -a "$PREVSNR2" -ne "0" ]; then
                        SNR2DIFF=$(($SNR2-$PREVSNR2))
                else
                        SNR2DIFF=0
                fi
        else
                SNR2DIFF=0
        fi
	# Check the snr difference if it was large it might have been a bad signal so don't deauthenticate. Otherwise deauthenticate.
	if [ "$SNRDIFF" -lt "23" -a "$SNR2DIFF" -lt "23" ]; then
		DEAUTHSTATION=1
	else
		# The snr difference was large so ignore it and don't deauthenticate.
		DEAUTHSTATION=0
	fi
}

#### INTIALIZE VARIABLES AND CLEAN UP. ####

AP1ADDRESS='192.168.1.2'
AP2ADDRESS='192.168.1.4'
AP3ADDRESS='192.168.1.6'
DEAUTHPORT='555'
DEAUTHSTATION='1'
KEEPALIVELOOP='10'
MAXSNRDIFF='35'
# KEEPALIVE sets how often you ping stations. Pinging improves signal detection but at the cost of increased battery consumption by the stations.
# To set KEEPALIVE: 0=Ping disabled 10=Ping every 10 seconds 20=Ping every 20 seconds 30=Ping every 30 seconds etc.
KEEPALIVE='10'
rm -f $aprdir/ap*snr.*
mkdir -p $aprdir

#### MAIN LOOP ####

while true
do
	STARTTIME=`date +%s`
	DATE=`date`
	echo "-------------------- $DATE --------------------" >> $log

	#### RETREIVE STATION DATA. ####

	## AP1 ##
	touch $aprdir/ap1/survey.lock >/dev/null 2>&1
	touch $aprdir/ap1/station.lock >/dev/null 2>&1
	sleep .15
	# Retreive Access Point 1 Survey Dump.
	AP1NOISE=`grep -A1 'in use' $aprdir/ap1/survey.dump | grep noise: | awk '{print $2}'`
	rm -f $aprdir/ap1/survey.lock >/dev/null 2>&1
	# Retreive Access Point 1 Station Dump.
	AP1STATIONS=`grep "Station" $aprdir/ap1/station.dump 2>/dev/null | awk '{print $2}'`
	AP1STATIONCOUNT=`grep -c "Station" $aprdir/ap1/station.dump 2>/dev/null`
        rm -f $aprdir/ap1/station.lock >/dev/null 2>&1

	## AP2 ##
        touch $aprdir/ap2/survey.lock >/dev/null 2>&1
	touch $aprdir/ap2/station.lock >/dev/null 2>&1
	sleep .15
	# Retreive Access Point 2 Survey Dump.
	AP2NOISE=`grep -A1 'in use' $aprdir/ap2/survey.dump | grep noise: | awk '{print $2}'`
	rm -f $aprdir/ap2/survey.lock >/dev/null 2>&1
	# Retreive Access Point 2 Station Dump.
        AP2STATIONS=`grep "Station" $aprdir/ap2/station.dump 2>/dev/null | awk '{print $2}'`
        AP2STATIONCOUNT=`grep -c "Station" $aprdir/ap2/station.dump 2>/dev/null`
        rm -f $aprdir/ap2/station.lock >/dev/null 2>&1

	## AP3 ##
	touch $aprdir/ap3/survey.lock >/dev/null 2>&1
	touch $aprdir/ap3/station.lock >/dev/null 2>&1
	sleep .15
	# Retreive Access Point 3 Survey Dump.
	AP3NOISE=`grep -A1 'in use' $aprdir/ap3/survey.dump | grep noise: | awk '{print $2}'`
	rm -f $aprdir/ap3/survey.lock >/dev/null 2>&1
	# Retreive Access Point 3 Station Dump.
        AP3STATIONS=`grep "Station" $aprdir/ap3/station.dump 2>/dev/null | awk '{print $2}'`
        AP3STATIONCOUNT=`grep -c "Station" $aprdir/ap3/station.dump 2>/dev/null`
        rm -f $aprdir/ap3/station.lock >/dev/null 2>&1

	# Combine All Access Point Clients.
	STATIONS="$AP1STATIONS $AP2STATIONS $AP3STATIONS"

	STATIONCOUNT=$(($AP1STATIONCOUNT+$AP2STATIONCOUNT+$AP3STATIONCOUNT))

	#### PING STATIONS TO IMPROVE CHANCE OF RETREIVING A SIGNAL. ####
	if [ "$KEEPALIVELOOP" -ge "$KEEPALIVE" -a "$KEEPALIVE" -ne "0" ]; then
		KEEPALIVELOOP=10
		COUNT=$STATIONCOUNT
		while [ "$COUNT" -gt "0" ]
		do
			STATION=`echo $STATIONS | awk -v x=$COUNT '{print $x}'`
			# First Try Retreiving Ip Address From Dnsmasq Lease File.
			ip=`cat /var/lib/misc/dnsmasq.leases | grep -m1 "$STATION" | awk '{print $3}'`
			if [ "$ip" = "" ]; then
				# Second Try Retreiving Ip Address From Arp Cache.
				ip=`cat /proc/net/arp | grep -m1 "$STATION" | awk '{print $1}'`
				if [ "$ip" = "" ]; then
					# Third Try Pinging Every Ip Address On Subnet.
					fping -b1 -c1 -i1 -q -r0 -t1 -g 192.168.1.0/24 >/dev/null 2>&1
					COUNT=0
				else
					ping -i .05 -c 1 -s 0 $ip >/dev/null 2>&1 &
				fi
			else
				ping -i .05 -c 1 -s 0 $ip >/dev/null 2>&1 &
			fi
			COUNT=$(($COUNT-1))
		done
	elif [ "$KEEPALIVE" -eq "0" ]; then
		KEEPALIVELOOP=10
	else
		KEEPALIVELOOP=$(($KEEPALIVELOOP+10))
	fi

	#### RETREIVE NETWORK DATA AND DO PREPROCESSING. ####

        # Retreive Access Point 1 Network Data Dump.
	touch $aprdir/ap1/network.lock >/dev/null 2>&1
	sleep .15
	# Preprocess Network Data By Greping Out Unwanted Packets.
	tcpdump -e -t -r $aprdir/ap1/ap1_network.dump 2>/dev/null | grep -E -v 'Acknowledgment|Beacon|Data' | grep -v "(oui Unknown) BA" > $aprdir/ap1_network.dump
	rm -f $aprdir/ap1/network.lock >/dev/null 2>&1

        # Retreive Access Point 2 Network Data Dump.
	touch $aprdir/ap2/network.lock >/dev/null 2>&1
	sleep .15
	# Preprocess Network Data By Greping Out Unwanted Packets.
	tcpdump -e -t -r $aprdir/ap2/ap2_network.dump 2>/dev/null | grep -E -v 'Acknowledgment|Beacon|Data' | grep -v "(oui Unknown) BA" > $aprdir/ap2_network.dump
	rm -f $aprdir/ap2/network.lock >/dev/null 2>&1

	# Retreive Access Point 3 Network Data Dump.
	touch $aprdir/ap3/network.lock >/dev/null 2>&1
	sleep .15
	# Preprocess Network Data By Greping Out Unwanted Packets.
	tcpdump -e -t -r $aprdir/ap3/ap3_network.dump 2>/dev/null | grep -E -v 'Acknowledgment|Beacon|Data' | grep -v "(oui Unknown) BA" > $aprdir/ap3_network.dump
	rm -f $aprdir/ap3/network.lock >/dev/null 2>&1

	#### RETREIVE STATION SIGNAL VALUES. ####

	while [ "${STATIONCOUNT}" -gt "0" ]
	do
		SNRDIFF='0'
		SNR2DIFF='0'
		STATION=`echo $STATIONS | awk -v x=$STATIONCOUNT '{print $x}'`

		CONNECTEDTOAP1=`echo $AP1STATIONS | grep -c $STATION`
		CONNECTEDTOAP2=`echo $AP2STATIONS | grep -c $STATION`
		CONNECTEDTOAP3=`echo $AP3STATIONS | grep -c $STATION`

		AP1SIGNAL=`grep $STATION $aprdir/ap1_network.dump 2>/dev/null | grep -E -o "\-?[0-9]{1,2}dB" | cut -d 'd' -f1  | tail -1`
		if [ "$AP1SIGNAL" = "" ]; then
			AP1SNR=0
		else
			AP1SNR=`echo $(($AP1NOISE-$AP1SIGNAL)) | sed 's/-//'`
		fi
		AP2SIGNAL=`grep $STATION $aprdir/ap2_network.dump 2>/dev/null | grep -E -o "\-?[0-9]{1,2}dB" | cut -d 'd' -f1  | tail -1`
		if [ "$AP2SIGNAL" = "" ]; then
			AP2SNR=0
                else
                        AP2SNR=`echo $(($AP2NOISE-$AP2SIGNAL)) | sed 's/-//'`
                fi
		AP3SIGNAL=`grep $STATION $aprdir/ap3_network.dump 2>/dev/null | grep -E -o "\-?[0-9]{1,2}dB" | cut -d 'd' -f1  | tail -1`
		if [ "$AP3SIGNAL" = "" ]; then
			AP3SNR=0
		else
                        AP3SNR=`echo $(($AP3NOISE-$AP3SIGNAL)) | sed 's/-//'`
		fi

		#### PREVENT STATIONS FROM CONSTANTLY HOPPING AROUND DIFFERENT ACCESS POINTS DO TO SIMULAR SIGNAL TO NOISE LEVELS. ####

		ADJUST=0
		if [ "$CONNECTEDTOAP1" -gt "0" ]; then
			if [ "${AP1SNR}" -lt "${AP2SNR}" -o "${AP1SNR}" -lt "${AP3SNR}" ]; then
				if [ "${AP1SNR}" -ge "40" ]; then
					ADJUST=99
				elif [ "${AP1SNR}" -ge "35" ]; then
					ADJUST=18
				elif [ "${AP1SNR}" -ge "30" ]; then
					ADJUST=15
                        	elif [ "${AP1SNR}" -ge "25" ]; then
                                	ADJUST=10
				elif [ "${AP1SNR}" -ge "20" ]; then
					ADJUST=8
                        	else
					ADJUST=6
                        	fi
			fi
		fi
		if [ "$CONNECTEDTOAP2" -gt "0" ]; then
			if [ "${AP2SNR}" -lt "${AP1SNR}" -o "${AP2SNR}" -lt "${AP3SNR}" ]; then
				if [ "${AP2SNR}" -ge "40" ]; then
					ADJUST=99
				elif [ "${AP2SNR}" -ge "35" ]; then
					ADJUST=18
				elif [ "${AP2SNR}" -ge "30" ]; then
					ADJUST=15
				elif [ "${AP2SNR}" -ge "25" ]; then
					ADJUST=10
				elif [ "${AP2SNR}" -ge "20" ]; then
					ADJUST=8
				else
					ADJUST=6
				fi
			fi
		fi
		if [ "$CONNECTEDTOAP3" -gt "0" ]; then
			if [ "${AP3SNR}" -lt "${AP1SNR}" -o "${AP3SNR}" -lt "${AP2SNR}" ]; then
				if [ "${AP3SNR}" -ge "40" ]; then
					ADJUST=99
				elif [ "${AP3SNR}" -ge "35" ]; then
					ADJUST=18
				elif [ "${AP3SNR}" -ge "30" ]; then
					ADJUST=15
				elif [ "${AP3SNR}" -ge "25" ]; then
					ADJUST=10
				elif [ "${AP3SNR}" -ge "20" ]; then
					ADJUST=8
				else
					ADJUST=6
				fi
			fi
		fi

		#### LOG. ####

		echo " " >> $log
		echo "STATION = $STATION" >> $log
		echo "AP1 SNR = $AP1SNR dBm" >> $log
		echo "AP2 SNR = $AP2SNR dBm">> $log
		echo "AP3 SNR = $AP3SNR dBm" >> $log
		echo "CONNECTED TO AP1 = $CONNECTEDTOAP1" >> $log
		echo "CONNECTED TO AP2 = $CONNECTEDTOAP2" >> $log
		echo "CONNECTED TO AP3 = $CONNECTEDTOAP3" >> $log

		#### COMPARE SIGNAL LEVELS WITH OTHER ACCESS POINTS AND SEND DEAUTHENTICATION TO STATION IF ANOTHER ACCESS POINT HAS A BETTER SIGNAL. ####

		if [ "$CONNECTEDTOAP1" -gt "0" ]; then
			if [ "${AP2SNR}" -gt "$(($AP1SNR+$ADJUST))" -a "${AP2SNR}" -ne "0" -a "${AP1SNR}" -ne "0" ]; then
				sig_proc "$STATION" ap1 $AP1SNR ap2 $AP2SNR
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "Deauthenticating from = AP1" >> $log
					echo "$STATION" | nc -q0 $AP1ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
				# Ignore Very Large SNR Difference's They Are Probably Bad Readings.
				if [ "$SNRDIFF" -ge "$MAXSNRDIFF" ]; then
					AP1SNR=$PREVSNR
				fi
				if [ "$SNR2DIFF" -ge "$MAXSNRDIFF" ]; then
					AP2SNR=$PREV2SNR
				fi
			elif [ "${AP3SNR}" -gt "$(($AP1SNR+$ADJUST))" -a "${AP3SNR}" -ne "0" -a "${AP1SNR}" -ne "0" ]; then
				sig_proc "$STATION" ap1 $AP1SNR ap3 $AP3SNR
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "Deauthenticating from = AP1" >> $log
					echo "$STATION" | nc -q0 $AP1ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
				# Ignore Very Large SNR Difference's They Are Probably Bad Readings.
				if [ "$SNRDIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP1SNR=$PREVSNR
				fi
                                if [ "$SNR2DIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP3SNR=$PREV2SNR
                                fi
			fi
		fi
		if [ "$CONNECTEDTOAP2" -gt "0" ]; then
                        if [ "${AP1SNR}" -gt "$(($AP2SNR+$ADJUST))" -a "${AP1SNR}" -ne "0" -a "${AP2SNR}" -ne "0" ]; then
				sig_proc "$STATION" ap2 $AP2SNR ap1 $AP1SNR
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "Deauthenticating from = AP2" >> $log
					echo "$STATION" | nc -q0 $AP2ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
				# Ignore Very Large SNR Difference's They Are Probably Bad Readings.
				if [ "$SNRDIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP2SNR=$PREVSNR
				fi
                                if [ "$SNR2DIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP1SNR=$PREV2SNR
                                fi
                        elif [ "${AP3SNR}" -gt "$(($AP2SNR+$ADJUST))" -a "${AP3SNR}" -ne "0" -a "${AP2SNR}" -ne "0" ]; then
				sig_proc "$STATION" ap2 $AP2SNR ap3 $AP3SNR
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "Deauthenticating from = AP2" >> $log
					echo "$STATION" | nc -q0 $AP2ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
				# Ignore Very Large SNR Difference's They Are Probably Bad Readings.
				if [ "$SNRDIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP2SNR=$PREVSNR
				fi
                                if [ "$SNR2DIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP3SNR=$PREV2SNR
                                fi
                        fi
                fi
		if [ "$CONNECTEDTOAP3" -gt "0" ]; then
                        if [ "${AP1SNR}" -gt "$(($AP3SNR+$ADJUST))" -a "${AP1SNR}" -ne "0" -a "${AP3SNR}" -ne "0" ]; then
				sig_proc "$STATION" ap3 $AP3SNR ap1 $AP1SNR
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "Deauthenticating from = AP3" >> $log
					echo "$STATION" | nc -q0 $AP3ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
				# Ignore Very Large SNR Difference's They Are Probably Bad Readings.
				if [ "$SNRDIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP3SNR=$PREVSNR
				fi
                                if [ "$SNR2DIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP1SNR=$PREV2SNR
                                fi
                        elif [ "${AP2SNR}" -gt "$(($AP3SNR+$ADJUST))" -a "${AP2SNR}" -ne "0" -a "${AP3SNR}" -ne "0" ]; then
				sig_proc "$STATION" ap3 $AP3SNR ap2 $AP2SNR
				if [ "$DEAUTHSTATION" -eq "1" ]; then
					echo "Deauthenticating from = AP3" >> $log
					echo "$STATION" | nc -q0 $AP3ADDRESS $DEAUTHPORT 2>/dev/null &
				fi
				# Ignore Very Large SNR Difference's They Are Probably Bad Readings.
				if [ "$SNRDIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP3SNR=$PREVSNR
				fi
                                if [ "$SNR2DIFF" -ge "$MAXSNRDIFF" ]; then
                                        AP2SNR=$PREV2SNR
                                fi
                        fi
		fi

		#### LOG. ####
		echo "SNR THRESHOLD           = $ADJUST dBm" >> $log

		#### SAVE CURRENT STATION SNR FOR ALL ACCESS POINTS.
		echo $AP1SNR > $aprdir/ap1snr.$STATION
		echo $AP2SNR > $aprdir/ap2snr.$STATION
		echo $AP3SNR > $aprdir/ap3snr.$STATION

		STATIONCOUNT=$(($STATIONCOUNT-1))
	done

	#### LOG. ####

	echo " " >> $log
	DATE=`date`
        echo "-------------------- $DATE --------------------" >> $log
	echo " " >> $log

	#### DYNAMICALLY ADJUST SLEEP TIME BASED ON HOW LONG IT TOOK TO EXECUTE.

	ENDTIME=`date +%s`
	EXETIME=$(($ENDTIME-$STARTTIME))
	SLEEPTIME=$((10-$EXETIME))
	if [ "$SLEEPTIME" -gt "0" ]; then
		sleep $SLEEPTIME
	fi
done
